<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Attention on Cong&#39;s Log</title>
    <link>https://congchan.github.io/tags/attention/</link>
    <description>Recent content in Attention on Cong&#39;s Log</description>
    <generator>Hugo -- 0.147.9</generator>
    <language>en</language>
    <lastBuildDate>Fri, 30 Nov 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://congchan.github.io/tags/attention/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Transformer &amp; Self-Attention (多头)自注意力编码</title>
      <link>https://congchan.github.io/posts/transformer-self-attention-%E5%A4%9A%E5%A4%B4%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%BC%96%E7%A0%81/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://congchan.github.io/posts/transformer-self-attention-%E5%A4%9A%E5%A4%B4%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%BC%96%E7%A0%81/</guid>
      <description>&lt;p&gt;注意力机制的原理是计算query和每个key之间的相关性$\alpha_c(q,k_i)$以获得注意力分配权重。在大部分NLP任务中，key和value都是输入序列的编码。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;注意力机制一般是用于提升seq2seq或者encoder-decoder架构的表现。但这篇2017 NIPS的文章&lt;a href=&#34;https://arxiv.org/abs/1706.03762&#34;&gt;Attention is all you need&lt;/a&gt;提出我们可以仅依赖注意力机制就可以完成很多任务. 文章的动机是LSTM这种时序模型速度实在是太慢了。&lt;/p&gt;
&lt;p&gt;近些年来，RNN（及其变种 LSTM, GRU）已成为很多nlp任务如机器翻译的经典网络结构。RNN从左到右或从右到左的方式顺序处理语言。RNN的按顺序处理的性质也使得其更难以充分利用现代快速计算设备，例如GPU等优于并行而非顺序处理的计算单元。虽然卷积神经网络（CNN）的时序性远小于RNN，但CNN体系结构如ByteNet或ConvS2S中，糅合远距离部分的信息所需的步骤数仍随着距离的增加而增长。&lt;/p&gt;
&lt;p&gt;因为一次处理一个单词，RNN需要处理多个时序的单词来做出依赖于长远离单词的决定。但各种研究和实验逐渐表明，决策需要的步骤越多，循环网络就越难以学习如何做出这些决定。而本身LSTM就是为了解决long term dependency问题，但是解决得并不好。很多时候还需要额外加一层注意力层来处理long term dependency。&lt;/p&gt;
&lt;p&gt;所以这次他们直接在编码器和解码器之间直接用attention，这样句子单词的依赖长度最多只有1，减少了信息传输路径。他们称之为Transformer。Transformer只执行一小段constant的步骤（根据经验选择）。在encoder和decoder中，分别应用&lt;strong&gt;self-attention 自注意力机制&lt;/strong&gt;(也称为intra Attention), 顾名思义，指的不是传统的seq2seq架构中target和source之间的Attention机制，而是source或者target自身元素之间的Attention机制。也就是说此时&lt;code&gt;Query&lt;/code&gt;, &lt;code&gt;Key&lt;/code&gt;和&lt;code&gt;Value&lt;/code&gt;都一样, 都是输入或者输出的序列编码. 具体计算过程和其他attention一样的，只是计算对象发生了变化. Self-attention 直接模拟句子中所有单词之间的关系，不管它们之间的位置如何。比如子“I arrived at the bank after crossing the river”，要确定“bank”一词是指河岸而不是金融机构，Transformer可以学会立即关注“river”这个词并在一步之内做出这个决定。&lt;/p&gt;
&lt;h3 id=&#34;transformer总体架构&#34;&gt;Transformer总体架构&lt;/h3&gt;
&lt;p&gt;与过去流行的使用基于自回归网络的Seq2Seq模型框架不同:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Transformer使用注意力来编码(不需要LSTM/CNN之类的)。&lt;/li&gt;
&lt;li&gt;引入自注意力机制&lt;/li&gt;
&lt;li&gt;Multi-Headed Attention Mechanism: 在编码器和解码器中使用 Multi-Headed self-attention。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Transformer也是基于encoder-decoder的架构。具体地说，为了计算给定单词的下一个表示 - 例如“bank” - Transformer将其与句子中的所有其他单词进行比较。这些比较的结果就是其他单词的注意力权重。这些注意力权重决定了其他单词应该为“bank”的下一个表达做出多少贡献。在计算“bank”的新表示时，能够消除歧义的“river”可以获得更高的关注。将注意力权重用来加权平均所有单词的表达，然后将加权平均的表达喂给一个全连接网络以生成“bank”的新表达，以反映出该句子正在谈论的是“河岸”。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://congchan.github.io/images/transform20fps.gif&#34; title=&#34;image from: https://ai.googleblog.com/2017/08/transformer-novel-neural-network.html&#34;&gt;&lt;/p&gt;
&lt;p&gt;Transformer的编码阶段概括起来就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先为每个单词生成初始表达或embeddings。这些由空心圆表示。&lt;/li&gt;
&lt;li&gt;然后，对于每一个词, 使用自注意力聚合来自所有其他上下文单词的信息，生成参考了整个上下文的每个单词的新表达，由实心球表示。并基于前面生成的表达, 连续地构建新的表达（下一层的实心圆）对每个单词并行地重复多次这种处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Encoder的self-attention中, 所有&lt;code&gt;Key&lt;/code&gt;, &lt;code&gt;Value&lt;/code&gt;和&lt;code&gt;Query&lt;/code&gt;都来自同一位置, 即上一层encoder的输出。&lt;/p&gt;
&lt;p&gt;解码器类似，所有&lt;code&gt;Key&lt;/code&gt;, &lt;code&gt;Value&lt;/code&gt;和&lt;code&gt;Query&lt;/code&gt;都来自同一位置, 即上一层decoder的输出, 不过只能看到上一层对应当前&lt;code&gt;query&lt;/code&gt;位置之前的部分。生成&lt;code&gt;Query&lt;/code&gt;时, 不仅关注前一步的输出，还参考编码器的最后一层输出。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://congchan.github.io/images/transformer.png&#34; title=&#34;单层编码器（左）和解码器（右），由 N = 6 个相同的层构建。&#34;&gt;
&lt;code&gt;N = 6&lt;/code&gt;, 这些“层”中的每一个由两个子层组成：position-wise FNN 和一个（编码器），或两个（解码器），基于注意力的子层。其中每个还包含4个线性投影和注意逻辑。&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器阅读理解 - LSTM与注意力机制 - 斯坦福问答数据集 (SQuAD)</title>
      <link>https://congchan.github.io/posts/%E6%9C%BA%E5%99%A8%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3-lstm%E4%B8%8E%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6-%E6%96%AF%E5%9D%A6%E7%A6%8F%E9%97%AE%E7%AD%94%E6%95%B0%E6%8D%AE%E9%9B%86-squad/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://congchan.github.io/posts/%E6%9C%BA%E5%99%A8%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3-lstm%E4%B8%8E%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6-%E6%96%AF%E5%9D%A6%E7%A6%8F%E9%97%AE%E7%AD%94%E6%95%B0%E6%8D%AE%E9%9B%86-squad/</guid>
      <description>&lt;p&gt;本文介绍注意力机制如何应用于阅读理解类任务, 并介绍了由此任务催生的一些注意力变种.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;注意力机制应用于阅读理解&#34;&gt;注意力机制应用于阅读理解&lt;/h2&gt;
&lt;p&gt;The Standford question and answer dataset &lt;a href=&#34;https://rajpurkar.github.io/SQuAD-explorer/&#34;&gt;(SQuAD)&lt;/a&gt; 是由 Rajpurkar 等人提出的一个较有挑战性的阅读理解数据集。该数据集包含 10 万个（问题，原文，答案）三元组，原文来自于 536 篇维基百科文章，而问题和答案的构建主要是通过众包的方式，让标注人员提出最多 5 个基于文章内容的问题并提供正确答案，且答案出现在原文中。SQuAD 和之前的完形填空类阅读理解数据集如 CNN/DM，CBT 等最大的区别在于：SQuAD 中的答案不在是单个实体或单词，而可能是一段短语，这使得其答案更难预测。SQuAD 包含公开的训练集和开发集，以及一个隐藏的测试集，其采用了与 ImageNet 类似的封闭评测的方式，研究人员需提交算法到一个开放平台，并由 SQuAD 官方人员进行测试并公布结果。&lt;/p&gt;
&lt;p&gt;由于 SQuAD 的答案限定于来自原文，模型只需要判断原文中哪些词是答案即可，因此是一种抽取式的 QA 任务而不是生成式任务。简单的 SQuAD 的模型框架可以参考seq2seq：Embed 层，Encode 层 和 Decode 层。Embed 层负责将原文和问题中的 tokens 映射为向量表示；Encode 层主要使用 RNN 来对原文和问题进行编码，这样编码后每个 token 的向量表示就蕴含了上下文的语义信息；Decode 层则基于 query-aware 的原文表示来预测答案起始位置。&lt;/p&gt;
&lt;p&gt;但这个文本数据集涉及问题，原文，答案三个部分, 特别是需要根据问题在原文中搜寻答案的范围, 这就涉及如果把问题的信息提取出来并作用于原文. 目前各种前沿模型的关注点几乎都是在如何捕捉问题和原文之间的交互关系，也就是在 Encode 层和 Decode 层之间, 使用一个 Interaction 层处理编码了问题语义信息的原文表示，即 query-aware 的原文表示，再输入给 Decode 层。而本来应用机器翻译Attention机制就能很好的处理这种交互。&lt;/p&gt;
&lt;p&gt;虽然注意力机制大同小异，但是不同的注意力权重（打分函数）带来的效果是不一样的。比较常用的是就是使用&lt;a href=&#34;%5Cattention#%E5%85%A8%E5%B1%80%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6&#34;&gt;全局注意力机制&lt;/a&gt;中提到的
&lt;/p&gt;
$$
\begin{aligned}
    score_{general}(t&#39; t) &amp;= s^\top_{t&#39;} W_\alpha h_t, \\\
\end{aligned}
$$&lt;p&gt;
就是用一个交互矩阵$W_\alpha$来捕捉问题和原文之间的交互关系. 原文作者称之为 &lt;strong&gt;Bilinear&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>从头理解注意力机制</title>
      <link>https://congchan.github.io/posts/%E4%BB%8E%E5%A4%B4%E7%90%86%E8%A7%A3%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://congchan.github.io/posts/%E4%BB%8E%E5%A4%B4%E7%90%86%E8%A7%A3%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h3 id=&#34;注意力机制如何起源的&#34;&gt;注意力机制如何起源的&lt;/h3&gt;
&lt;p&gt;神经网络中的注意力机制启发自人类的&lt;strong&gt;视觉注意力机制&lt;/strong&gt;，能够（高分辨率地）聚焦于图像中需要重点关注的目标区域（节省大脑资源），同时（低分辨率地）感知周围的图像，然后随着时间的推移调整焦点（状态调整）。&lt;/p&gt;
&lt;p&gt;在神经网路中，注意力机制是为了解决什么问题？&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;在深度学习还没流行的时候, 传统的算法早已应用了注意力机制的思想.&lt;/p&gt;
&lt;p&gt;比如一个非线性回归问题，对于代表位置的输入变量${x_1, ..., x_m}$ 和 代表位置对应的输出值${y_1, ..., y_m}$, 如何预测新的$x_n$对应的输出? Baseline 就是求均值, &lt;/p&gt;
$$\frac{1}{m} \sum_{i=1}^{m} y_i$$&lt;p&gt; 当然更好的方案(Watson, Nadaraya, 1964)是根据不同的输入$x_i$给与$y_i$不同的权重, &lt;/p&gt;
$$y = \sum_{i=1}^{m} \alpha(x, x_i) y_i $$&lt;p&gt;这里$x$代表一个新的输入(作为&lt;strong&gt;query&lt;/strong&gt;), 根据$x$和已有的位置$x_i$(作为&lt;strong&gt;key&lt;/strong&gt;)进行某种运算, 得到$x_i$对应的输出$y_i$(作为&lt;strong&gt;value&lt;/strong&gt;)的权重. 如果每一个权重都是一个Guassians分布, 并正则化, 则一个&lt;strong&gt;加权的回归预测模型&lt;/strong&gt;就是:&lt;/p&gt;
$$f(x) = \sum_i y_i \frac{k(x_i, x)}{\sum_j k(x_j, x)}$$&lt;p&gt;这个算法的&amp;quot;深度学习&amp;quot;版本, 就是其权重是通过优化器(如sgd)学习得来, 并且把平均运算改为&lt;strong&gt;加权池化(weighted pooling)&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;如何简单直观地理解注意力机制&#34;&gt;如何简单直观地理解注意力机制&lt;/h3&gt;
&lt;p&gt;虽然注意力机制一开始被应用于图像识别领域，但是后来推广到神经机器翻译(NMT)中(&lt;code&gt;Seq2Seq for Machine Translation, Sutskever, Vinyals, Le ‘14&lt;/code&gt;). NMT也是注意力机制在NLP领域最早最成功的应用之一.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://www.wildml.com/wp-content/uploads/2015/09/Screen-Shot-2015-09-17-at-10.39.06-AM.png&#34; title=&#34;一个典型的seq2seq(encoder-decoder)翻译模型, 向量h表示编码器的内部状态&#34;&gt;
在上图中，&lt;code&gt;Echt&lt;/code&gt;，&lt;code&gt;Dicke&lt;/code&gt;和&lt;code&gt;Kiste&lt;/code&gt;词被送到编码器中，并且在特殊信号（未显示）之后，解码器开始生成翻译后的句子。解码器不断生成单词，直到产生特殊的句子结尾标记(如&lt;code&gt;&amp;lt;eos&amp;gt;&lt;/code&gt;)。也就是说解码器仅根据最后一个隐含状态$h_3$来生成序列. 假如这个句子很短, 那么效果其实是很好的.&lt;/p&gt;
&lt;p&gt;不过对于比较长的句子, 那么这个架构的弱点就暴露无疑了.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先, 编码器能否把句子的所有信息(语言学上的和常识等知识)都理解/捕捉到?&lt;/li&gt;
&lt;li&gt;其次, 受限于目前的实现技术(主要是硬件), 单个隐含状态(如$h_3$这个向量)的维度大小是有限的, 而句子长度以及语言的组合情况是无限的, 单靠$h_3$自身是存储信息能力是有限的.&lt;/li&gt;
&lt;li&gt;再者, 解码器是否有足够的解码能力从一个隐含状态中解码出所有的信息?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然大部分句子是相对紧凑的, 但语言有个特点, 就是一个词有可能和前面好几步之外的词有联系, 比如一些指代词用于指代文本最开头出现的名词; 语义上, 某个句子的理解, 可能依赖于前面多个句子; 当然往大了说, 要理解一篇文章或一本书, 我们通常需要理解并联系多个段落, 多个章节. 这种现象称之为语言的长距离依赖(&lt;strong&gt;long-term dependency&lt;/strong&gt;), 在一般性的序列数据中, 这个现象称之为的Long-range dependence(LRD). 即使是使用了LSTM这种理论上可以克服长距离依赖问题地网络, 也无法很好的克服语言的长距离依赖问题, 究其原因, 除了LSTM自身的局限性之外, 更主要是深度学习的梯度学习方法的局限性(在梯度反向传播中, 会出现梯度消失).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
