<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Algs4 on Cong&#39;s Log</title>
    <link>https://congchan.github.io/tags/algs4/</link>
    <description>Recent content in Algs4 on Cong&#39;s Log</description>
    <generator>Hugo -- 0.147.9</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Jan 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://congchan.github.io/tags/algs4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithms - Princeton</title>
      <link>https://congchan.github.io/posts/algorithms-princeton/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://congchan.github.io/posts/algorithms-princeton/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Algorithms, Part I, &lt;a href=&#34;https://online.princeton.edu/course/algorithms-part-i&#34;&gt;https://online.princeton.edu/course/algorithms-part-i&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Algorithms, Part II, &lt;a href=&#34;https://online.princeton.edu/course/algorithms-part-ii&#34;&gt;https://online.princeton.edu/course/algorithms-part-ii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne &lt;a href=&#34;https://algs4.cs.princeton.edu/&#34;&gt;https://algs4.cs.princeton.edu/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;unionfind&#34;&gt;Union−Find&lt;/h2&gt;
&lt;p&gt;Considering the dynamic connectivity problem, modeling of multiple objects connected in a space/network.&lt;/p&gt;
&lt;p&gt;Applications involve manipulating objects of all types.
・Pixels in a digital photo.
・Computers in a network.
・Friends in a social network.
・Transistors in a computer chip.&lt;/p&gt;
&lt;p&gt;Given a set of N objects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;union(a, b)&lt;/code&gt;: connect two objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connected(p, q)&lt;/code&gt;: is two objects connected?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find(p)&lt;/code&gt;: Find component identifier for &lt;code&gt;p&lt;/code&gt; (0 to N – 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modeling the objects: array.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Algorithms 03 - Memory 内存</title>
      <link>https://congchan.github.io/posts/algorithms-03-memory-%E5%86%85%E5%AD%98/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://congchan.github.io/posts/algorithms-03-memory-%E5%86%85%E5%AD%98/</guid>
      <description>&lt;h2 id=&#34;memory&#34;&gt;Memory&lt;/h2&gt;
&lt;p&gt;Bit. 0 or 1.
Byte. 8 bits.
Megabyte (MB). 1 million or $2^{20}$ bytes.
Gigabyte (GB). 1 billion or $2^{30}$ bytes.
64-bit machine. We assume a 64-bit machine with 8 byte pointers (References).
・Can address more memory.
・Pointers use more space (some JVMs &amp;ldquo;compress&amp;rdquo; ordinary object pointers to 4 bytes to avoid this cost).&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;typical-memory-usage-for-primitive-types-and-arrays&#34;&gt;Typical memory usage for primitive types and arrays&lt;/h3&gt;
&lt;p&gt;primitive types (bytes):
&lt;code&gt;boolean&lt;/code&gt; 1
&lt;code&gt;byte&lt;/code&gt; 1
&lt;code&gt;char&lt;/code&gt; 2
&lt;code&gt;int&lt;/code&gt; 4
&lt;code&gt;float&lt;/code&gt; 4
&lt;code&gt;long&lt;/code&gt; 8
&lt;code&gt;double&lt;/code&gt; 8&lt;/p&gt;</description>
    </item>
    <item>
      <title>Algorithms 02 - Amortized Analysis 平摊分析</title>
      <link>https://congchan.github.io/posts/algorithms-02-amortized-analysis-%E5%B9%B3%E6%91%8A%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://congchan.github.io/posts/algorithms-02-amortized-analysis-%E5%B9%B3%E6%91%8A%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;假如有两种交税方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每天付 3 金币&lt;/li&gt;
&lt;li&gt;每次付的金币呈指数级增长，但通知付款频率呈指数级下降
&lt;ul&gt;
&lt;li&gt;第1天：付 1&lt;/li&gt;
&lt;li&gt;第2天：付 2 (累计 3)&lt;/li&gt;
&lt;li&gt;第4天：付 4 (累积 7)&lt;/li&gt;
&lt;li&gt;第8天：付 8 (累积 15)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;哪种付的钱比较少？
第二种比较划算，本质上等同于每天付 2，就是&lt;strong&gt;amortized constant&lt;/strong&gt;。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;A more rigorous examination of amortized analysis is done here, in three steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pick a cost model (like in regular runtime analysis)&lt;/li&gt;
&lt;li&gt;Compute the average cost of the i&amp;rsquo;th operation&lt;/li&gt;
&lt;li&gt;Show that this average (amortized) cost is bounded by a constant.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类似的应用在&lt;a href=&#34;https://congchan.github.io/NOTE-CS61B-data-structures-07-java-array-based-list#%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9&#34;&gt;Array list 扩容&lt;/a&gt;中提到的 geometric resizing 方法(实际也是Python list 使用的方法)有体现, 所以使用一个因数来扩容数组, 可以让 ArrayList 的 &lt;code&gt;add&lt;/code&gt;操作变为 amortized constant time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Algorithms 01 - Asymptotic Analysis 渐进分析</title>
      <link>https://congchan.github.io/posts/algorithms-01-asymptotic-analysis-%E6%B8%90%E8%BF%9B%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://congchan.github.io/posts/algorithms-01-asymptotic-analysis-%E6%B8%90%E8%BF%9B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;Resource and Reference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CS61B Berkeley - Josh Hug&lt;/li&gt;
&lt;li&gt;Algorithms Princeton - ROBERT SEDGEWICK, KEVIN WAYNE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效率来源两个方面:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编程成本: 开发程序需要多长时间？代码是否容易阅读，修改和维护（大部分成本来自维护和可扩展性）？&lt;/li&gt;
&lt;li&gt;运行成本: 程序需要多长时间运行 (Time complexity)？ 需要多少内存 (Space complexity)？&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;asymptotic-analysis&#34;&gt;Asymptotic Analysis&lt;/h2&gt;
&lt;p&gt;Care about what happens for very large &lt;code&gt;N&lt;/code&gt; (asymptotic behavior). We want to consider what types of algorithms would best handle scalability - Algorithms that scale well have better asymptotic runtime behavior.&lt;/p&gt;
&lt;p&gt;Simplification Summary&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Only consider the worst case.&lt;/li&gt;
&lt;li&gt;Pick a representative operation (aka: cost model)&lt;/li&gt;
&lt;li&gt;Ignore lower order terms&lt;/li&gt;
&lt;li&gt;Ignore multiplicative constants.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Simplified Analysis Process&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
